MODULE collections
Counter()

Opis: Słownik, który zlicza wystąpienia elementów w iterable.
Metody:
most_common(n): Zwraca n najczęściej występujących elementów i ich liczby.
elements(): Zwraca iterator, który generuje elementy w ich liczbie wystąpień.
Przykład użycia:
python
Skopiuj kod
from collections import Counter
c = Counter('abracadabra')
print(c.most_common(2))  # [('a', 5), ('r', 2)]
namedtuple()

Opis: Tworzy krotki z nazwanymi polami, co ułatwia dostęp do danych.
Przykład:
python
Skopiuj kod
from collections import namedtuple
Point = namedtuple('Point', ['x', 'y'])
p = Point(10, 20)
print(p.x, p.y)  # 10 20
OrderedDict()

Opis: Utrzymuje porządek dodawania elementów (zostało wprowadzone do standardowego słownika w Pythonie 3.7+).
Przykład:
python
Skopiuj kod
from collections import OrderedDict
d = OrderedDict()
d['one'] = 1
d['two'] = 2
print(d)  # OrderedDict([('one', 1), ('two', 2)])
defaultdict(default_factory)

Opis: Słownik, który zwraca domyślną wartość dla nieistniejących kluczy.
Przykład:
python
Skopiuj kod
from collections import defaultdict
d = defaultdict(int)  # Domyślnie int() zwraca 0
d['key'] += 1
print(d['key'])  # 1
deque()

Opis: Kolekcja typu lista, która pozwala na szybkie dodawanie i usuwanie elementów z obu końców.
Metody:
appendleft(value): Dodaje element na początek.
popleft(): Usuwa i zwraca element z początku.
rotate(n): Przesuwa elementy o n miejsc (pozytywne dla w prawo, negatywne dla w lewo).
Przykład:
python
Skopiuj kod
from collections import deque
d = deque([1, 2, 3])
d.appendleft(0)
print(d)  # deque([0, 1, 2, 3])
d.rotate(1)
print(d)  # deque([3, 0, 1, 2])
MODULE itertools
product(iterable, repeat=1)

Opis: Generuje kartezjańskie produkty elementów.
Przykład:
python
Skopiuj kod
from itertools import product
p = product('AB', repeat=2)
print(list(p))  # [('A', 'A'), ('A', 'B'), ('B', 'A'), ('B', 'B')]
permutations(iterable, r)

Opis: Generuje wszystkie permutacje elementów o długości r.
Przykład:
python
Skopiuj kod
from itertools import permutations
p = permutations('ABCD', 2)
print(list(p))  # [('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'A'), ('B', 'C'), ('B', 'D'), ...]
combinations(iterable, r)

Opis: Generuje kombinacje elementów o długości r (kolejność nie ma znaczenia).
Przykład:
python
Skopiuj kod
from itertools import combinations
c = combinations('ABCD', 2)
print(list(c))  # [('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'C'), ('B', 'D'), ('C', 'D')]
accumulate(iterable, func=sum)

Opis: Tworzy listę, gdzie każdy element jest wynikiem zastosowania funkcji do siebie i poprzedniego elementu.
Przykład:
python
Skopiuj kod
from itertools import accumulate
a = accumulate([1, 2, 3, 4])
print(list(a))  # [1, 3, 6, 10]
groupby(iterable, key)

Opis: Grupuje elementy iterable według funkcji klucza. Należy posortować przed grupowaniem.
Przykład:
python
Skopiuj kod
from itertools import groupby
data = sorted(['a', 'b', 'a', 'c', 'b'], key=lambda x: x)
grouped = groupby(data)
for key, group in grouped:
    print(key, list(group))  # a ['a', 'a'] b ['b', 'b'] c ['c']
Iteratory nieskończone:

count(start, step): Generuje nieskończoną sekwencję liczb, zaczynając od start i inkrementując o step.
cycle(iterable): Powtarza elementy iterable w nieskończoność.
repeat(object, count): Powtarza obiekt w nieskończoność lub określoną liczbę razy.
Przykład:
python
Skopiuj kod
from itertools import count, cycle, repeat
for i in count(10):
    if i > 15: break
    print(i)  # 10 11 12 13 14 15

c = cycle('AB')
for _ in range(6):
    print(next(c))  # A B A B A B

r = repeat(1, 3)
print(list(r))  # [1, 1, 1]
LAMBDA FUNCTION
Opis: Funkcje anonimowe, które są przydatne w kontekście funkcji wyższego rzędu, takich jak map(), filter(), i sorted().
Przykłady:
sorted(iterable, key=lambda x: x[1]): Sortuje elementy iterable według drugiego elementu.
map(lambda x: x**2, seq): Zwraca nową listę z kwadratami elementów w seq.
filter(lambda x: x > 0, seq): Zwraca listę tylko z dodatnimi elementami z seq.
reduce(lambda x, y: x * y, seq): Zwraca iloczyn elementów w seq.
ERRORS & EXCEPTIONS
Typowe wyjątki:

FileNotFoundError: Plik nie został znaleziony.
NameError: Nazwa zmiennej jest nieznana.
ValueError: Nieprawidłowa wartość (np. podczas konwersji typu).
IndexError: Indeks poza zakresem.
KeyError: Klucz nie istnieje w słowniku.
Rzucanie wyjątków:

raise Exception('message'): Rzuca ogólny wyjątek z wiadomością.
assert condition, 'message': Rzuca AssertionError, jeśli condition jest fałszywe.
Tworzenie własnych wyjątków:

python
Skopiuj kod
class ValueTooSmallError(Exception):
    def __init__(self, message, value):
        super().__init__(message)
        self.value = value
LOGGING MODULE
Dla małych aplikacji:

python
Skopiuj kod
import logging

logging.basicConfig(level=logging.INFO, filename='app.log', format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
Dla większych aplikacji:

python
Skopiuj kod
import logging

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
file_handler = logging.FileHandler('app.log')
file_handler.setLevel(logging.DEBUG)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

def log_message(message):
    logger.info(message)